AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:772499133347:certificate/f9e8907e-d095-4393-9ed2-4f52b7e9d711
  DomainName:
    Type: String
    Default: spraoi.ai
  FullDomainName:
    Type: String
  HostedZoneId:
    Type: String
    Default: Z19KBYFZ06RQQ6
  NotFoundCode:
    Type: String
    Default: 200
  NotFoundPath:
    Type: String
    Default: /index.html
  EnableDnsRecords:
    Type: String
    Default: true
  WhitelistIps:
    Type: CommaDelimitedList
    Default: false
  EnableBucketEncryption:
    Type: String
    Default: false
  CloudFrontLoggingBucket:
    Type: String
    Default: false
  CloudFrontLoggingPrefix:
    Type: String
    Default: cloudfront/
  PermissionsBoundaryPolicyArn:
    Type: String
    Default: false
  GeoRestrictionType:
    Type: String
    Default: whitelist
    AllowedValues:
      - none
      - whitelist
      - blacklist
    Description:
      The method that you want to use to restrict distribution of your content
      by country.
  GeoRestrictionLocations:
    Type: CommaDelimitedList
    Default: false
    Description:
      Comma delimited list of two-letter, uppercase country codes for countries
      that you want to include in your blacklist or whitelist.
Conditions:
  BucketEncryptionEnabled: !Equals [!Ref EnableBucketEncryption, true]
  CloudFrontLoggingDisabled: !Equals [!Ref CloudFrontLoggingBucket, false]
  CloudFrontLoggingEnabled: !Not [Condition: CloudFrontLoggingDisabled]
  DnsRecordsEnabled: !Equals [!Ref EnableDnsRecords, true]
  IsUsEastOneRegion: !Equals [!Ref AWS::Region, us-east-1]
  PermissionsBoundaryDisabled:
    !Equals [!Ref PermissionsBoundaryPolicyArn, false]
  WhitelistIpsAclDisabled: !Equals [!Select [0, !Ref WhitelistIps], false]
  WhitelistIpsAclEnabled: !Not [Condition: WhitelistIpsAclDisabled]
  GeoRestrictionDisabled:
    !Equals [!Select [0, !Ref GeoRestrictionLocations], false]
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FullDomainName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      BucketEncryption: !If
        - BucketEncryptionEnabled
        - ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        - !Ref AWS::NoValue
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudfrontOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub arn:aws:s3:::${Bucket}/*
          - Action: s3:ListBucket
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudfrontOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub arn:aws:s3:::${Bucket}
  CloudfrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName
  Cloudfront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - Bucket
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref FullDomainName
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 404
            ResponseCode: !Ref NotFoundCode
            ResponsePagePath: !Ref NotFoundPath
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          LambdaFunctionAssociations: !If
            - IsUsEastOneRegion
            - - EventType: origin-request
                LambdaFunctionARN: !Ref OriginRequestLambdaVersion
            - !Ref AWS::NoValue
          TargetOriginId: Origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging: !If
          - CloudFrontLoggingEnabled
          - Bucket: !Ref CloudFrontLoggingBucket
            Prefix: !Ref CloudFrontLoggingPrefix
          - !Ref AWS::NoValue
        Origins:
          - DomainName: !GetAtt Bucket.DomainName
            Id: Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudfrontOriginAccessIdentity}
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
        WebACLId: !If
          - WhitelistIpsAclEnabled
          - !GetAtt WhitelistIpsAcl.Arn
          - !Ref AWS::NoValue
        Restrictions:
          - GeoRestriction:
              Locations: !If
                - GeoRestrictionDisabled
                - !Ref AWS::NoValue
                - !Ref GeoRestrictionLocations
              RestrictionType: !If
                - GeoRestrictionDisabled
                - none
                - !Ref GeoRestrictionType
  Dns:
    Type: AWS::Route53::RecordSetGroup
    Condition: DnsRecordsEnabled
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      RecordSets:
        - Name: !Ref FullDomainName
          Type: A
          AliasTarget:
            DNSName: !GetAtt Cloudfront.DomainName
            HostedZoneId: Z2FDTNDATAQYW2
        - Name: !Ref FullDomainName
          Type: AAAA
          AliasTarget:
            DNSName: !GetAtt Cloudfront.DomainName
            HostedZoneId: Z2FDTNDATAQYW2
  OriginRequestLambda:
    Type: AWS::Lambda::Function
    Condition: IsUsEastOneRegion
    Properties:
      Handler: index.handler
      Role: !GetAtt OriginLambdaRole.Arn
      Runtime: nodejs12.x
      Timeout: 5
      Code:
        ZipFile: >
          exports.handler = (event, context, callback) => {
            const request = event.Records[0].cf.request;
            const isNotFile = !/\/[^/]+\.[^/]+$/.test(request.uri);
            const doesNotEndWithSlash = !request.uri.endsWith('/');
            if (isNotFile && doesNotEndWithSlash) {
              return callback(null, {
                body: '',
                headers: {
                  location: [
                    {
                      key: 'Location',
                      value: request.querystring
                        ? `${request.uri}/?${request.querystring}`
                        : `${request.uri}/`,
                    },
                  ],
                },
                status: 301,
                statusDescription: 'Moved Permanently',
              });
            }
            request.uri = request.uri.replace(/\/$/, '/index.html');
            return callback(null, request);
          };
  OriginRequestLambdaVersion:
    Type: AWS::Lambda::Version
    Condition: IsUsEastOneRegion
    Properties:
      FunctionName: !GetAtt OriginRequestLambda.Arn
  OriginLambdaRole:
    Type: AWS::IAM::Role
    Condition: IsUsEastOneRegion
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaServiceToAssumeRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
      PermissionsBoundary: !If
        - PermissionsBoundaryDisabled
        - !Ref AWS::NoValue
        - !Ref PermissionsBoundaryPolicyArn
  WhitelistIpsIpSet:
    Type: AWS::WAFv2::IPSet
    Condition: WhitelistIpsAclEnabled
    Properties:
      Addresses: !Ref WhitelistIps
      IPAddressVersion: IPV4
      Scope: CLOUDFRONT
  WhitelistIpsAcl:
    Type: AWS::WAFv2::WebACL
    Condition: WhitelistIpsAclEnabled
    Properties:
      DefaultAction:
        Block: {}
      Rules:
        - Action:
            Allow: {}
          Name: !Sub ${AWS::StackName}WhitelistIpsAclRule
          Priority: 0
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt WhitelistIpsIpSet.Arn
          VisibilityConfig:
            CloudWatchMetricsEnabled: false
            MetricName: !Sub ${AWS::StackName}WhitelistIpsAclRuleMetrics
            SampledRequestsEnabled: false
      Scope: CLOUDFRONT
      VisibilityConfig:
        CloudWatchMetricsEnabled: false
        MetricName: !Sub ${AWS::StackName}WhitelistIpsAclMetrics
        SampledRequestsEnabled: false
Outputs:
  BucketUrl:
    Value: !Sub s3://${Bucket}
  CloudFrontDistributionId:
    Value: !Ref Cloudfront
